# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install ALL dependencies (including dev)
RUN npm ci --legacy-peer-deps

RUN npm install --platform=linux --arch=x64 esbuild@0.19.12 --legacy-peer-deps

# Stage 2: Builder
FROM node:18-alpine AS builder

WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN npm run build

# Create dist/db directory
RUN mkdir -p dist/db

# Compile both seed.ts and schema.ts maintaining directory structure
RUN npx esbuild src/db/seed.ts --outfile=dist/db/seed.cjs --platform=node --bundle --format=cjs --external:pg --loader:.node=file
RUN npx esbuild src/db/schema/index.ts --outfile=dist/db/schema.cjs --platform=node --bundle --format=cjs --external:pg --loader:.node=file

# Stage 3: Runner
FROM node:18-alpine AS runner

WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN apk add --no-cache bash curl tini

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy node_modules for runtime
COPY --from=deps /app/node_modules ./node_modules

RUN mkdir .next
RUN chown nextjs:nodejs .next

COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist

USER nextjs

EXPOSE 3000

ENTRYPOINT ["/sbin/tini", "--"]

CMD ["node", "server.js"]